/*
 * Copyright (C) 2006-2020 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <fingersTuner_IDL.h>

#include <yarp/os/idl/WireTypes.h>

class fingersTuner_IDL_sync_helper :
        public yarp::os::Portable
{
public:
    explicit fingersTuner_IDL_sync_helper(const std::string& part, const yarp::os::Value& val);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_part;
    yarp::os::Value m_val;

    thread_local static bool s_return_helper;
};

thread_local bool fingersTuner_IDL_sync_helper::s_return_helper = {};

fingersTuner_IDL_sync_helper::fingersTuner_IDL_sync_helper(const std::string& part, const yarp::os::Value& val) :
        m_part{part},
        m_val{val}
{
    s_return_helper = {};
}

bool fingersTuner_IDL_sync_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("sync", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_part)) {
        return false;
    }
    if (!writer.write(m_val)) {
        return false;
    }
    return true;
}

bool fingersTuner_IDL_sync_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class fingersTuner_IDL_tune_helper :
        public yarp::os::Portable
{
public:
    explicit fingersTuner_IDL_tune_helper(const std::string& part, const yarp::os::Value& val);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_part;
    yarp::os::Value m_val;

    thread_local static bool s_return_helper;
};

thread_local bool fingersTuner_IDL_tune_helper::s_return_helper = {};

fingersTuner_IDL_tune_helper::fingersTuner_IDL_tune_helper(const std::string& part, const yarp::os::Value& val) :
        m_part{part},
        m_val{val}
{
    s_return_helper = {};
}

bool fingersTuner_IDL_tune_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("tune", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_part)) {
        return false;
    }
    if (!writer.write(m_val)) {
        return false;
    }
    return true;
}

bool fingersTuner_IDL_tune_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class fingersTuner_IDL_save_helper :
        public yarp::os::Portable
{
public:
    explicit fingersTuner_IDL_save_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool fingersTuner_IDL_save_helper::s_return_helper = {};

fingersTuner_IDL_save_helper::fingersTuner_IDL_save_helper()
{
    s_return_helper = {};
}

bool fingersTuner_IDL_save_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("save", 1, 1)) {
        return false;
    }
    return true;
}

bool fingersTuner_IDL_save_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class fingersTuner_IDL_quit_helper :
        public yarp::os::Portable
{
public:
    explicit fingersTuner_IDL_quit_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool fingersTuner_IDL_quit_helper::s_return_helper = {};

fingersTuner_IDL_quit_helper::fingersTuner_IDL_quit_helper()
{
    s_return_helper = {};
}

bool fingersTuner_IDL_quit_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("quit", 1, 1)) {
        return false;
    }
    return true;
}

bool fingersTuner_IDL_quit_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
fingersTuner_IDL::fingersTuner_IDL()
{
    yarp().setOwner(*this);
}

bool fingersTuner_IDL::sync(const std::string& part, const yarp::os::Value& val)
{
    fingersTuner_IDL_sync_helper helper{part, val};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool fingersTuner_IDL::sync(const std::string& part, const yarp::os::Value& val)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? fingersTuner_IDL_sync_helper::s_return_helper : bool{};
}

bool fingersTuner_IDL::tune(const std::string& part, const yarp::os::Value& val)
{
    fingersTuner_IDL_tune_helper helper{part, val};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool fingersTuner_IDL::tune(const std::string& part, const yarp::os::Value& val)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? fingersTuner_IDL_tune_helper::s_return_helper : bool{};
}

bool fingersTuner_IDL::save()
{
    fingersTuner_IDL_save_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool fingersTuner_IDL::save()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? fingersTuner_IDL_save_helper::s_return_helper : bool{};
}

bool fingersTuner_IDL::quit()
{
    fingersTuner_IDL_quit_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool fingersTuner_IDL::quit()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? fingersTuner_IDL_quit_helper::s_return_helper : bool{};
}

// help method
std::vector<std::string> fingersTuner_IDL::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("sync");
        helpString.emplace_back("tune");
        helpString.emplace_back("save");
        helpString.emplace_back("quit");
        helpString.emplace_back("help");
    } else {
        if (functionName == "sync") {
            helpString.emplace_back("bool sync(const std::string& part, const yarp::os::Value& val) ");
            helpString.emplace_back("Synchronize PID values with values stored ");
            helpString.emplace_back("in the configuration file. ");
            helpString.emplace_back("@param part specifies the part name as per ");
            helpString.emplace_back("configuration file. ");
            helpString.emplace_back("@param val accounts for a single joint if ");
            helpString.emplace_back("the corresponding integer is given or a set ");
            helpString.emplace_back("of joints if the corresponding alias is provided ");
            helpString.emplace_back("as defined within the configuration file. ");
            helpString.emplace_back("@return true/false on success/failure. ");
        }
        if (functionName == "tune") {
            helpString.emplace_back("bool tune(const std::string& part, const yarp::os::Value& val) ");
            helpString.emplace_back("Tune PID of a joint or a set of joints. ");
            helpString.emplace_back("@param part specifies the part name as per ");
            helpString.emplace_back("configuration file. ");
            helpString.emplace_back("@param val accounts for a single joint if ");
            helpString.emplace_back("the corresponding integer is given or a set ");
            helpString.emplace_back("of joints if the corresponding alias is provided ");
            helpString.emplace_back("as defined within the configuration file. ");
            helpString.emplace_back("@return true/false on success/failure. ");
        }
        if (functionName == "save") {
            helpString.emplace_back("bool save() ");
            helpString.emplace_back("Save the PID parameters on configuration file. ");
            helpString.emplace_back("@return true/false on success/failure. ");
        }
        if (functionName == "quit") {
            helpString.emplace_back("bool quit() ");
            helpString.emplace_back("Quit the module. ");
            helpString.emplace_back("@return true/false on success/failure. ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool fingersTuner_IDL::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "sync") {
            std::string part;
            yarp::os::Value val;
            if (!reader.readString(part)) {
                reader.fail();
                return false;
            }
            if (!reader.read(val)) {
                reader.fail();
                return false;
            }
            fingersTuner_IDL_sync_helper::s_return_helper = sync(part, val);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(fingersTuner_IDL_sync_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "tune") {
            std::string part;
            yarp::os::Value val;
            if (!reader.readString(part)) {
                reader.fail();
                return false;
            }
            if (!reader.read(val)) {
                reader.fail();
                return false;
            }
            fingersTuner_IDL_tune_helper::s_return_helper = tune(part, val);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(fingersTuner_IDL_tune_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "save") {
            fingersTuner_IDL_save_helper::s_return_helper = save();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(fingersTuner_IDL_save_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "quit") {
            fingersTuner_IDL_quit_helper::s_return_helper = quit();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(fingersTuner_IDL_quit_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
