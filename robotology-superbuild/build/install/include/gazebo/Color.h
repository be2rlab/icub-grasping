/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_COLOR_H
#define YARP_THRIFT_GENERATOR_STRUCT_COLOR_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

namespace GazeboYarpPlugins {

class Color :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    std::int16_t r;
    std::int16_t g;
    std::int16_t b;

    // Default constructor
    Color();

    // Constructor with field values
    Color(const std::int16_t r,
          const std::int16_t g,
          const std::int16_t b);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<Color> unwrapped;

    class Editor :
            public yarp::os::Wire,
            public yarp::os::PortWriter
    {
    public:
        // Editor: default constructor
        Editor();

        // Editor: constructor with base class
        Editor(Color& obj);

        // Editor: destructor
        ~Editor() override;

        // Editor: Deleted constructors and operator=
        Editor(const Editor& rhs) = delete;
        Editor(Editor&& rhs) = delete;
        Editor& operator=(const Editor& rhs) = delete;
        Editor& operator=(Editor&& rhs) = delete;

        // Editor: edit
        bool edit(Color& obj, bool dirty = true);

        // Editor: validity check
        bool isValid() const;

        // Editor: state
        Color& state();

        // Editor: start editing
        void start_editing();

#ifndef YARP_NO_DEPRECATED // Since YARP 3.2
        YARP_DEPRECATED_MSG("Use start_editing() instead")
        void begin()
        {
            start_editing();
        }
#endif // YARP_NO_DEPRECATED

        // Editor: stop editing
        void stop_editing();

#ifndef YARP_NO_DEPRECATED // Since YARP 3.2
        YARP_DEPRECATED_MSG("Use stop_editing() instead")
        void end()
        {
            stop_editing();
        }
#endif // YARP_NO_DEPRECATED

        // Editor: r field
        void set_r(const std::int16_t r);
        std::int16_t get_r() const;
        virtual bool will_set_r();
        virtual bool did_set_r();

        // Editor: g field
        void set_g(const std::int16_t g);
        std::int16_t get_g() const;
        virtual bool will_set_g();
        virtual bool did_set_g();

        // Editor: b field
        void set_b(const std::int16_t b);
        std::int16_t get_b() const;
        virtual bool will_set_b();
        virtual bool did_set_b();

        // Editor: clean
        void clean();

        // Editor: read
        bool read(yarp::os::ConnectionReader& connection) override;

        // Editor: write
        bool write(yarp::os::ConnectionWriter& connection) const override;

    private:
        // Editor: state
        Color* obj;
        bool obj_owned;
        int group;

        // Editor: dirty variables
        bool is_dirty;
        bool is_dirty_r;
        bool is_dirty_g;
        bool is_dirty_b;
        int dirty_count;

        // Editor: send if possible
        void communicate();

        // Editor: mark dirty overall
        void mark_dirty();

        // Editor: mark dirty single fields
        void mark_dirty_r();
        void mark_dirty_g();
        void mark_dirty_b();

        // Editor: dirty_flags
        void dirty_flags(bool flag);
    };

private:
    // read/write r field
    bool read_r(yarp::os::idl::WireReader& reader);
    bool write_r(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_r(yarp::os::idl::WireReader& reader);
    bool nested_write_r(const yarp::os::idl::WireWriter& writer) const;

    // read/write g field
    bool read_g(yarp::os::idl::WireReader& reader);
    bool write_g(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_g(yarp::os::idl::WireReader& reader);
    bool nested_write_g(const yarp::os::idl::WireWriter& writer) const;

    // read/write b field
    bool read_b(yarp::os::idl::WireReader& reader);
    bool write_b(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_b(yarp::os::idl::WireReader& reader);
    bool nested_write_b(const yarp::os::idl::WireWriter& writer) const;
};

} // namespace GazeboYarpPlugins

#endif // YARP_THRIFT_GENERATOR_STRUCT_COLOR_H
